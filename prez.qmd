---
title: "Numerical Modeling of Heat & Mass Transfers in Stefan-type Flows Using a Sharp Interface Two-Fluid Formulation"
authors: 
  L. Libat, 
  E. Chénier, 
  C. Selçuk,
  V. Le Chenadec 
date: today
date-format: long
institute: "Multiscale Modeling and Simulation Laboratory, Gustave Eiffel University, Champs-sur-Marne, France"
bibliography: references.bib
highlight-style: github
format:
    revealjs: 
        filters: [custom.lua]
        theme: default
        logo: images/msmelog.png
        css: styles.css
        slide-number: true
        preview-links: auto
        toc: true
        toc-depth: 1
        footer: |
            <p>© 2025 L. Libat, V. Le Chenadec, E. Chénier, C.Selçuk </p>
---

# Introduction

## Context & Challenges

- **Interfacial Flows:** Two immiscible phases separated by a sharp interface
- **Phase Change:** Solid ⇄ liquid, driven by latent heat
- **Applications:** Material processing, ice melting, crystal growth ...

![](images/ice.jpg){fig-align="center"}

---

## Stefan-type Problems

- Classical phase change problems where a moving boundary separates phases
- Interface position $s(t)$ depends on temperature gradients $\nabla T_i$
$$
\begin{aligned}
&\text{For i=1,2, find } T_i(x,t)\ \text{and interface } s(t) \text{ such that:}\\
&\quad \partial_t T_i - \nabla\cdot(k_i\,\nabla T_i) = 0, \quad x \in \Omega_i(t),\\
&\quad T_i(s(t),t) = T_m, \quad 
\rho\,L\,\frac{ds}{dt} \;=\; ⟦ k_i\,\nabla T_i \cdot \mathbf{n}⟧.
\end{aligned}
$$

![](images/ice_melting.gif){width=70% fig-align="center"}

---

## Primary Challenges

::: {.border .p-2}
| **Challenges** | | **Our Approach** |
|:---------------|:-:|:----------------|
| Sharp Interface Modeling | → | Cut-Cell on Cartesian Grid |
| Conservation with Moving Domains | → | Space-Time Framework |
| Interface Jump Conditions | → | Two-Fluid Formulation |
| Interface Update | → | Fixed-Point Iteration |
| Numerical Stability | → | Implicit Interface Coupling |
:::

# Cut Cell Method for static interfaces

## Two-Phase Discretization

::: {layout-ncol=2}
::: {.incremental}
- Interface divides domain into regions
- 3 types of cells:
  - Fluid cells 
  - Cut cells (intersected by interface)
  - Solid cells
- 1 set of equations for each phase
- 1 set of equations for the interface
- Unknowns: Bulk temperature and interface temperature
:::

![](images/cut_cell_with_conditions.svg){width=50% fig-align="center"}
:::

---

## Cut-Cell Discretization

$$
\begin{aligned}
\frac{\partial T}{\partial t} - \nabla \cdot (k \nabla T) &= S 
\end{aligned}
$$

Integrating over control volume and integrating in time:

$$
\int_{\Omega_i} (T^{n+1} - T^n) \, dV = \Delta t \left[ \color{blue}{\int_{\partial\Omega_i \setminus \Gamma_i} k \nabla \tilde{T} \cdot \mathbf{n} \, dS} + \color{red}{\int_{\Gamma_i} k \nabla \tilde{T} \cdot \mathbf{n} \, dS} + \int_{\Omega_i} \tilde{S} \, dV \right]
$$

::: {layout-ncol=2}
where 
$$\tilde{T} = \theta T^{n+1} + (1-\theta)T^n$$

![](images/interface_cut_cell_formulation.png){width=100% fig-align="center"}
:::

---

## Cut-Cell Discretization

After discretization for cells cut by the interface:

$$
V_i(T_i^{n+1} - T_i^n) = \Delta t \left[ \sum_{f \in \text{reg}} k A_f \nabla_f(\tilde{T}_i) + F_i^{\Gamma} + S_i V_i \right]
$$

Interface flux $F_i^{\Gamma}$ depends on boundary conditions:

- **Dirichlet**: $T=g(\mathbf{x})$ → $F_i^{\Gamma} = k A_{\Gamma} \nabla_{\Gamma}(\tilde{T}_i)$
- **Neumann**: $k \nabla T \cdot \mathbf{n} = q_{\Gamma}$ → $F_i^{\Gamma} = q_{\Gamma} A_{\Gamma}$
- **Robin**: $\alpha T + \beta k \nabla T \cdot \mathbf{n} = g$ → Linear combination of Dirichlet and Neumann

---

## Discretized System

$$
\begin{bmatrix}
M_{11} & M_{12} & 0 & 0 \\
0 & M_{22} & 0 & M_{24} \\
0 & 0 & M_{33} & M_{34} \\
M_{41} & M_{42} & M_{43} & M_{44}
\end{bmatrix}
\begin{bmatrix}
T^{n+1}_{\text{bulk 1}} \\
T^{n+1}_{\text{interface 1}} \\
T^{n+1}_{\text{bulk 2}} \\
T^{n+1}_{\text{interface 2}}
\end{bmatrix} =
RHS
$$

- Implicit time-stepping
- Coupling between bulk and interface terms
- Enforce boundary conditions directly in the system
- ⚠️ **No need for ghost cells or extrapolation**

--- 

## Validation Case: 2D Two-Phase Heat Equation

$\Omega_1$ is a disk with radius $R$. $\Omega_2$ is the complement of $\Omega_1$ in the unit square.

$$
\begin{aligned}
\frac{\partial T_i}{\partial t} - \nabla \cdot (k_i \nabla T_i) &= 0 \quad \text{in } \Omega_i, \quad i=1,2 \\
T_1 - \alpha_2 T_2 &= 0 \quad \text{on } \Gamma, \\
k_1 \nabla T_1 \cdot \mathbf{n} - k_2 \nabla T_2 \cdot \mathbf{n} &= 0 \quad \text{on } \Gamma
\end{aligned}
$$

Analytical solution:
$$
\small
\begin{aligned}
T_1(r,t) &= \frac{4 T_{1,0} k_1 k_2^2 \alpha_2}{\pi^2 R} \int_0^{\infty} \exp{-k_1 u^2 t} \frac{J_0(ur) J_1(uR)}{u^2(\Phi^2(u) + \Psi^2(u))} du \\
T_2(r,t) &= \frac{2 T_{2,0} k_1 \sqrt{k_2} \alpha_2}{\pi} \int_0^{\infty} \exp{-k_1 u^2 t} \frac{J_1(uR)(J_0(k ur)\Phi(u) - Y_0(k ur)\Psi(u))}{u(\Phi^2(u) + \Psi^2(u))} du
\end{aligned}
$$

---

## Validation: 2D Two-Phase Heat Equation


$\Omega_1$ is a disk with radius $R$ in a unit square domain $\Omega_2$

::: {#fig-heat2 layout-ncol=2}
![Convergence Results](images/two_phase_conv.png){width=100%}

![Temperature Field](images/heat_2d_2ph_henry_end.png){width=100%}

Second-order convergence in $L^2$ norm for regular cells, superlinear for cut cells
:::

# Cut Cell Method for moving interfaces

## Space-Time Approach

- Combine time with spatial domain (extrude cells across $\Delta t$)
- Preserves conservation across time steps especially for discrete events

![From 1D Space to 2D Space-Time](images/space_time.gif){width="80%" fig-align="center"}

---

## Fresh/Dead Cell Problem

- Cells may change status as interface moves:
  - **Fresh cells:** Empty at $t^n$, wet at $t^{n+1}$
  - **Dead cells:** Wet at $t^n$, empty at $t^{n+1}$

![](images/fresh_dead_cells_visualization.png){width=80% fig-align="center"}

- Our space-time approach preserves conservation even with changing domain

---

## VOF Advection vs. Iterative Method

::: {layout-ncol="2"}
::: {.column}
**Traditional VOF Approach:**

$$
\frac{\partial \alpha}{\partial t} + \nabla\cdot(\alpha\,\mathbf{u}) = 0
$$

- **Challenges:**
  - Velocity extension near interface
  - Numerical diffusion over time
  - Operator splitting errors

![VOF Advection Schematic](images/vof_advection.png){width=90%}
:::

::: {.column}
**Our Iterative Method:**


$$
\rho L \frac{\partial s}{\partial t} = ⟦\mathbf{q}\cdot\mathbf{n}⟧ \leftrightarrow F(s,T) = 0
$$

- **Advantages:**
  - Enforces conservation
  - Iteratively updates interface

![Newton-Based Schematic](images/rootfindingnewton.jpg){width=55%}
:::
:::

---

## Newton Iteration for Interface Tracking

- **Interface Representation** : Parametrization with Height functions $y=H(x)$

- **Stefan Condition:** $\rho\,L\,\dot{s} = ⟦\mathbf{q}\cdot\mathbf{n}⟧ \leftrightarrow F(s,T) = 0$

We formulate this as a newton iteration problem on the interface height function:

$$H^{n+1,(k+1)}_i = H^{n+1,(k)}_i - F_i^{(k)}$$

Where:

- $H_i^{n+1,(k+1)}$ is the new interface representation
- $H_i^{n+1,(k)}$ is the previous interface representation
- $F_i^{(k)}$ is the residual based on the Stefan condition

---

## Fixed-Point Theoretical Framework

- Our interface update: $H^{n+1,(k+1)} = f(H^{n+1,(k)})$
- **Banach Fixed-Point Theorem** guarantees convergence for contracting mappings and existence of a (unique) fixed point

- Observed that : 
  - Lipschitz constant $L < 1$


![](images/stefan_fixed_point_analysis_step2.png){height=700 fig-align="center"}


---

## Test Case: 2D Stefan Problem

- Fusion of a solid slab
- Initial temperature $T_0 = 0$ (cooled melting)
- Dirichlet boundary condition $T = 1$

::: {layout-ncol="2"}
![Interface convergence](images/stefan_2d_Inter_Conv.png){width=100%}

![Interface position](images/stefan_1D_interface.png){width=100%}
:::

---

## Convergence Properties

- Linear convergence observed ($O(k^{1.1})$)
- Efficient with good initial guess (extrapolation or velocity-based)

![Residuals (log10)](images/residual_withguess.png){width=80%}

---

## Mullins-Sekerka Instability Test

::: {layout-ncol=2}
::: {.column}
**Interface Perturbation**

- Small waves on solid-liquid interface
- Some modes grow, some decay
- Growth rate matches theoretical prediction

![Growth amplitude](images/growing_interface_ampl.png){width=90%}
:::

::: {.column}
**Pattern Formation**

![Growing dendrite](images/mullins_sekerka_interface){width=100%}

- Initial small perturbation
- Develops into dendrite pattern
:::
:::

# Conclusion & Perspectives

## Key Achievements

- **Cut-cell method for two-phase problems**
  - Conservation guaranteed
  - Superlinear convergence
  - No interpolation needed for boundary conditions

- **Space-time framework for moving interfaces**
  - Properly handles discrete events (fresh/dead cells)
  - Maintains conservation

- **Implicit interface tracking**
  - Fixed-point iterative procedure
  - Enforces physics-based interface movement


# Questions ?
Thank you for your attention!

# Appendix {.appendix visibility="uncounted"}

## Future Work

- Front-tracking approach for interface representation :
  - Interface represented by a set of markers
  - Optimization problem to update interface position
  - Non-linear least squares solver for interface update
- Extension to Navier-Stokes equations for two-phase flows :
  - Coupling with momentum equations
  - Implicit treatment of interface coupling
  - Fully coupled system of equations
- Preconditioning strategies and parallelization : 
  - Efficient solvers for large systems
  - Parallel implementation



## Front-Tracking Enhancement

- Interface represented by a set of markers with positions $\vec{X}_I$
- Interface update formulated as optimization problem:

$$
\mathbf{X}^{n+1} = \text{argmin} \left\{ \sum_i \left| F_i \right|^2 \right\}
$$

Where $F_i = \rho L (V_i^{n+1} - V_i^{n}) - ⟦\mathbf{q}^\gamma\cdot\mathbf{n}⟧$ is the Stefan condition residual

::: {layout-ncol=2}
![](images/star_evolution.gif){width=80%}

**Solution via non-linear least squares:**
- Jacobian matrix: $J_{i,J} = \rho L \frac{\partial V_i^{n+1}}{\partial X_J}$
- Levenberg-Marquardt update:
  $\mathbf{X}^{n+1} = \mathbf{X}^{n} - (J^T J + \lambda D)^{-1} J^T \mathbf{F}$
:::

## References

::: {#refs}
:::