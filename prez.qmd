---
title: "Numerical Modeling of Heat & Mass Transfers in Stefan-type Flows Using a Sharp Interface Two-Fluid Formulation"
title-slide-attributes: 
  data-background-image: "images/logos.png"
  data-background-repeat: no-repeat
  data-background-size: 50%
  data-background-position: 50% 90%
authors: 
  <u>Louis Libat</u>, 
  Eric Chénier, 
  Can Selçuk,
  Vincent Le Chenadec 
date: today
date-format: long
institute: "Multiscale Modeling and Simulation Laboratory, CNRS MSME UMR 8208, Gustave Eiffel University"
bibliography: references.bib
highlight-style: github
filters: 
  - pseudocode
format:
    revealjs: 
        filters: [custom.lua]
        theme: default
        logo: images/msmelog.png
        css: styles.css
        slide-number: true
        preview-links: auto
        toc: false
        toc-depth: 1
        footer: |
            <p>© 2025 L. Libat, E. Chénier, C.Selçuk, V. Le Chenadec</p>
        include-in-header:
          text: |
            <script>
            MathJax = {
              loader: {
                load: ['[tex]/boldsymbol']
              },
              tex: {
                tags: "all",
                inlineMath: [['$','$'], 
                displayMath: [['$$','$$'], ['\\[','\\]']],
                processEscapes: true,
                processEnvironments: true,
                packages: {
                  '[+]': ['boldsymbol']
                }
              }
            };
            </script>
            <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js" type="text/javascript"></script>


---

# Introduction

## Context & Challenges

- **Interfacial Flows:** Two immiscible phases separated by a sharp interface
- **Phase Change:** Solid ⇄ liquid, limited by latent heat or diffusion
- **Applications:** Material processing, ice melting, crystal growth ...

![](images/ice.jpg){fig-align="center"}

---

## Stefan-type Problems

- Classical phase change problems where a moving boundary separates phases [see @Stefan1891]
- Interface position $s(t)$ depends on heat fluxes $k_p \nabla T_p$ and vice versa
$$
\begin{aligned}
&\text{Find $T_s$, $T_l$ and interface position $s(t)$ such that:}\\
&\partial_t T_s - \alpha_s\nabla^2 T_s = 0 \quad \text{in solid phase}\\
&\partial_t T_l - \alpha_l\nabla^2 T_l = 0 \quad \text{in liquid phase}\\
&\rho L\dot{s} = k_l\nabla T_l \cdot \mathbf{n_{sl}} - k_s\nabla T_s \cdot \mathbf{n_{sl}} \quad \text{at interface}\\
&T_s = T_l = T_m \quad \text{at interface}\\
\end{aligned}
$$

![](images/ice_melting.gif){width=100% fig-align="center"}

---

## Primary Challenges

![](images/difficulties.png){width=100% fig-align="center"}

# Cut Cell Method for static interfaces

## Two-Fluid Formulation Philosophy

::: {layout-ncol=2}
![Cartesian grid with interface $\Gamma$ separating solid/liquid regions](images/cut_cell_with_conditions.svg){width=100% fig-align="center"}

::: {.column}
**4 Equations: Bulk \& Interface**
$$
\begin{cases}
\frac{\partial T_s}{\partial t} = \alpha_s \nabla^2 T_s \quad \text{in } \Omega_s \\
\frac{\partial T_l}{\partial t} = \alpha_l \nabla^2 T_l \quad \text{in } \Omega_l \\
\end{cases}
$$

$$
\begin{cases}
\begin{aligned}
⟦T⟧ &= g(\mathbf{x}) \quad \text{on } \Gamma \\
⟦k \nabla T \cdot \mathbf{n}⟧ &= h(\mathbf{x}) \quad \text{on } \Gamma
\end{aligned}
\end{cases}
$$

**4 Unknowns:**

- Bulk temperatures: $T_s$, $T_l$
- Interface temperatures: $T_s^\Gamma$, $T_l^\Gamma$

:::
:::


---

## Cut-Cell Discretization

::: {layout-ncol=2}
::: {.column}
For each phase, we have the heat equation:
$$
\begin{aligned}
\frac{\partial T_p}{\partial t} - \alpha_p \nabla \cdot (\nabla T_p) &= S_p \quad \text{in } \Omega_p
\end{aligned}
$$

Integrating over control volume and integrating in time:
:::

::: {.column}
![](images/two_phase_cell_formulation.png){width=80% fig-align="center"}
:::
:::

$$
\small
\int_{t^n}^{t^{n+1}} \int_{\Omega_p} \frac{\partial T_p}{\partial t} \, dV dt = \int_{t^n}^{t^{n+1}} \left[ \underbrace{\int_{\partial\Omega_p \setminus \Gamma} \alpha_p \nabla T_p \cdot \mathbf{n}_p \, dS}_{\text{Regular Flux}} + \underbrace{\int_{\Gamma} \alpha_p \nabla T_p \cdot \mathbf{n}_p \, dS}_{\text{Interface Flux}} + \int_{\Omega_p} S_p \, dV \right] dt
$$

---

## Cut-Cell Discretization

For each phase (solid, liquid), the discretization leads to:
$$
V_p(T_p^{n+1} - T_p^n) = \Delta t \left[ \sum_{f \in \text{reg}} \alpha_p A_f \nabla_f(\tilde{T}_p) \cdot \mathbf{n_f}+ F_p^{\Gamma} + S_p V_p \right]
$$

Where:

- Fluxes are computed using Stokes' theorem on staggered cells $\int_{\Omega_{f}} \nabla T \, dV = \int_{\partial\Omega_{f}} T \mathbf{n} \, dS$ 

Boundary conditions at the interface are defined as:

::: {layout-ncol=2}
**Temperature Jump:**
$$
\begin{aligned}
⟦T⟧ &= g \quad \text{on } \Gamma \\
T_s^\Gamma -  T_l^\Gamma &= g(\mathbf{x_\Gamma})
\end{aligned}
$$

**Heat Flux Jump:**
$$
\begin{aligned}
⟦k \nabla T \cdot \mathbf{n}⟧ &= h(\mathbf{x}) \quad \text{on } \Gamma \\
F_s^\Gamma - F_l^\Gamma &= A_\Gamma h(\mathbf{x_\Gamma})
\end{aligned}
$$
:::

---

## Discretized System

$$
\begin{bmatrix}
M_{\text{bulk}}^s & M_{\text{int}}^s & 0 & 0 \\
I & 0 & - I & 0 \\
0 & 0 & M_{\text{bulk}}^l & M_{\text{int}}^l \\
F_{\text{bulk}}^s & F_{\text{int}}^s & F_{\text{bulk}}^l & F_{\text{int}}^l
\end{bmatrix}
\begin{bmatrix}
T^{n+1}_{\text{s}} \\
T^{n+1,\Gamma}_{\text{s}} \\
T^{n+1}_{\text{l}} \\
T^{n+1,\Gamma}_{\text{l}}
\end{bmatrix} =
\begin{bmatrix}
\text{RHS}_s \\
g \\
\text{RHS}_l \\
A_\Gamma h
\end{bmatrix}
$$

- Implicit time-stepping
- Coupling between bulk and interface terms
- Enforce boundary conditions directly in the system
- ⚠️ **No need for ghost cells or extrapolation**

---

## System Invertibility Analysis

::: {layout-ncol=2}
::: {.column}
**Block System Reformulation**

$$
\begin{bmatrix}
A & B \\
C & D
\end{bmatrix}
\begin{bmatrix}
\mathbf{T}_{\rm bulk} \\
\mathbf{T}_\Gamma
\end{bmatrix}
=
\begin{bmatrix}
\mathbf{R}_{\rm bulk} \\
\mathbf{R}_\Gamma
\end{bmatrix}
$$

- $A$: Block-diagonal, SPD (for $\alpha_p, \Delta t > 0$)
- Invertibility via Schur complement $S = D - CA^{-1}B$
:::

::: {.column}
**Schur Complement Structure**

$$
\tiny
S = 
\begin{bmatrix}
-[(M_{\rm bulk}^s)^{-1}M_{\rm int}^s] + [(M_{\rm bulk}^l)^{-1}M_{\rm int}^l] & 0 \\
F_{\rm int}^s - F_{\rm bulk}^s(M_{\rm bulk}^s)^{-1}M_{\rm int}^s & F_{\rm int}^l - F_{\rm bulk}^l(M_{\rm bulk}^l)^{-1}M_{\rm int}^l
\end{bmatrix}
$$

- Lower-triangular form with nonzero diagonal blocks
- Interface-flux blocks SPD for $\alpha_p > 0$
- System invertible for physically valid parameters
- Works for all cut-cell configurations
:::
:::

---

## Validation Case: 2D Two-Phase Heat Equation

::: {layout-ncol=2}
::: {.column}
$$
\begin{aligned}
\rho_p c_p\frac{\partial T_p}{\partial t} - \nabla \cdot (k_p \nabla T_p) &= 0 \quad \text{in } \Omega_p \\
T_s - \beta_l T_l &= 0 \quad \text{on } \Gamma, \\
k_s \nabla T_s \cdot \mathbf{n} - k_l \nabla T_l \cdot \mathbf{n} &= 0 \quad \text{on } \Gamma, \\
\end{aligned}
$$
:::

::: {.column}
![](images/henry_scheme.svg){width=100%}
:::
:::


Analytical solution (Keyhole Contour Integration)
$$
\small
\begin{aligned}
T_s(r,t) &= \frac{4 T_{s,0} k_s k_l^2 \beta_l}{\pi^2 R} \int_0^{\infty} \exp{(-k_s u^2 t)} \frac{J_0(ur) J_1(uR)}{u^2(\Phi^2(u) + \Psi^2(u))} du \\
T_l(r,t) &= \frac{2 T_{l,0} k_s \sqrt{k_l} \beta_l}{\pi} \int_0^{\infty} \exp{(-k_s u^2 t)} \frac{J_1(uR)(J_0(k ur)\Phi(u) - Y_0(k ur)\Psi(u))}{u(\Phi^2(u) + \Psi^2(u))} du
\end{aligned}
$$

---

## Validation: 2D Two-Phase Heat Equation

::: {#fig-heat3 layout-ncol=1}
![Temperature field & Nusselt number](images/heat_2d_2ph_henry_end3.png){width=80%}

Sharp interface with no spurious oscillations
:::

---

## Validation: 2D Two-Phase Heat Equation

::: {#fig-heat2 layout-ncol=1}
![Convergence Results](images/two_phase_conv.png){width=60%}

Second-order convergence in $L^2$ norm for regular cells, superlinear for cut cells
:::

---

## Validation: 2D Two-Phase Heat Equation

::: {#fig-heat2 layout-ncol=1}
![Various homothetic jumps](images/henry_profile_comp.png){width=70%}

Good agreement with stiff homothetic jumps
:::

# Cut Cell Method for moving interfaces

## Finite-Volume Space-Time Method

- Combine time with spatial domain (extrude cells across $\Delta t$)
- Discrete events (**fresh/dead cells**) carefully handled
- Extension to 2D (3D ST) and 3D (4D ST) possible

![From 1D Space to 2D Space-Time](images/space_time.gif){width="80%" fig-align="center"}

## Space-Time Discretization

**Reynolds Transport Theorem:**

$$\frac{d}{dt} \int_{\Omega(t)} f\, dV = \int_{\Omega(t)} \frac{\partial f}{\partial t}\, dV + \int_{\partial \Omega(t)} \bigl(\mathbf{w}\cdot\mathbf{n}\bigr) f\, dS$$

Applied to heat equation in moving domain:

\normalsize
$$
\left[ \int_{\Omega_p(t)}\! T_p\,dV\right]_{t_{n}}^{t^{n+1}} = \int_{t^n}^{t^{n+1}}\int_{\partial\Omega_p(t)} \alpha_p \nabla T_p \cdot \mathbf{n} dS dt + \int_{t^n}^{t^{n+1}}\int_{\partial\Omega_p(t)} \Bigl(\mathbf{w}\!\cdot\!\mathbf{n}\Bigr) T_p\,dS dt 
$$

- Same discretization as before 
- Additional term for moving interface
- Geometric Conservation Law (**GCL**) : $V^{n+1}-V^{n} = \int_{\partial \Omega(t)} \bigl(\mathbf{w}\cdot\mathbf{n}\bigr)  dS$  satisfied

---

## VOF Advection vs. Iterative Method

::: {layout-ncol="2"}
::: {.column}
**Traditional VOF Approach:** [see @Weymouth2010]

$$
\frac{\partial c}{\partial t} + \mathbf{u} \cdot \nabla c = 0
$$

- **Challenges:**
  - Velocity extension
  - Decoupling of interface and temperature field

![VOF Advection Schematic](images/vof_advection.png){width=90%}
:::

::: {.column}
**Our Iterative Method:** [paper in preparation]


$$
\rho L \frac{\partial s}{\partial t} - ⟦k \nabla T \cdot\mathbf{n}⟧ = 0 \leftrightarrow F(s,T) = 0
$$

- **Advantages:**
  - Enforces conservation locally 
  - Interface update coupled with temperature field

![Newton-Based Schematic](images/rootfindingnewton.jpg){width=45%}
:::
:::

---

## Newton Iteration for Interface update

- **Interface Representation**: Height function $y=s(x)$ with position $\mathbf{s}_\Gamma$

- **Stefan Condition as Root-Finding Problem**: 
  $$\rho\,L\,\dot{s} - ⟦k \nabla T\cdot\mathbf{n}⟧ = 0 \quad \Rightarrow \quad F(\mathbf{s}_\Gamma, T) = 0$$

- **Newton Iteration Method**:
  $$\mathbf{s}_\Gamma^{n+1,(k+1)} = \mathbf{s}_\Gamma^{n+1,(k)} - \left(\frac{\partial F^{(k)}}{\partial \mathbf{s}_\Gamma}\right)^{-1}F(\mathbf{s}_\Gamma^{n+1,(k)})$$

::: {layout-ncol=2}
::: {.column}
![](images/newton_update.svg){width=100%, fig-align="center"}
:::

::: {.column}
- Iterate until convergence: $\|F(\mathbf{s}_\Gamma^{n+1,(k)})\| < \epsilon$
- Each iteration requires solving temperature fields on updated domains
:::
:::

---

## Newton Iteration for Interface update

```pseudocode
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}[H]
  \caption{\large Newton Iteration for Interface Position}
    \begin{algorithmic}[1]
      \State $k \gets 0$
      \State Initialize: $s^{n+1,k} \gets s^n$ or $s^n + \Delta t \dot{s}^n$
    \end{algorithmic}
\end{algorithm}
```

Classical Front Tracking : Advect Markers

---

## Newton Iteration for Interface update

```pseudocode
#| html-indent-size: "1.2em"
#| html-comment-delimiter: "//"
#| html-line-number: true
#| html-line-number-punc: ":"
#| html-no-end: false
#| pdf-placement: "htb!"
#| pdf-line-number: true

\begin{algorithm}[H]
  \caption{\large Newton Iteration for Interface Position}
    \begin{algorithmic}[1]
      \State $k \gets 0$
      \State Initialize: $s^{n+1,k} \gets s^n$ or $s^n + \Delta t \dot{s}^n$
      \Repeat
        \State Solve: $\partial_t T_p^k - \alpha_p \Delta T_p^k = 0$ in $\Omega_p^k(t)$
        \State Compute mismatch: $r = F(s^{n+1,k},T^{n+1,k}) = \rho L \dot{s} - [[\nabla T^{n+1,k}\cdot n]]$
          \If{$|r| < \epsilon$}
            \State Converged
          \Else
            \State Update: $s^{n+1,k+1} = s^{n+1,k} - (\partial_s F(s^{n+1,k}, T^{n+1,k}))^{-1} r$
            \State $k \gets k+1$
          \EndIf
        \Until{converged}
    \end{algorithmic}
\end{algorithm}
```

---

## Test Case: 2D Two-Phase Stefan Problem

::: {layout-nrow=2}
- Fusion of a solid slab
- Initial position off equilibrium

![](images/stef_bc_test.svg){width=100% fig-align="center"}

![Interface convergence](images/stefan_2d_Inter_Conv.png){width=100%}

![Interface position](images/stefan_1D_interface.png){width=100%}
:::

---

## Convergence Properties

- Fast convergence : 3, 4 iterations sufficient
- Efficient with good initial guess (extrapolation or velocity-based)

![Residuals (log10)](images/residual_withguess.png){width=80%}

---

## Mullins-Sekerka Instability Test

[see @Mullins1964]

::: {layout-ncol=2}
::: {.column}
**Interface Perturbation**

- Small waves on solid-liquid interface
- Some modes grow, some decay

![Growth amplitude](images/growing_interface_ampl.png){width=90%}
:::

::: {.column}
**Pattern Formation**

- Initial small perturbation
- Develops into dendrite pattern

![Growing dendrite](images/mullins_sekerka_interface1.png){width=90%}
:::
:::

# Conclusion & Perspectives

## Key Achievements

- **Cut-cell method for two-phase problems**
  - Conservation guaranteed
  - Superlinear convergence
  - No interpolation needed for boundary conditions

- **Space-time finite volume for moving interfaces**
  - Properly handles discrete events (fresh/dead cells)
  - Maintains conservation

- **Implicit Coupling for interface update**
  - No velocity extension, no reinitialization
  - Newton iteration for interface update
  - Coupling between interface update and temperature field


# Questions ?
Thank you for your attention!

# Appendix {.appendix visibility="uncounted"}

## Appendix : Future Work

- Front-tracking approach for interface representation :
  - Interface represented by a set of markers
  - Optimization problem to update interface position
  - Non-linear least squares solver for interface update
- Extension to Navier-Stokes equations for two-phase flows :
  - Coupling with momentum equations
  - Implicit treatment of interface coupling
  - Fully coupled system of equations
- Preconditioning strategies and parallelization : 
  - Efficient solvers for large systems
  - Parallel implementation

## Appendix : Fixed-Point Theoretical Framework

- **Fixed-Point Formulation**: $\mathbf{s}_\Gamma^{n+1,(k+1)} = f(\mathbf{s}_\Gamma^{n+1,(k)})$

- **Banach Fixed-Point Theorem**: Guarantees convergence if $f$ is contractive. Existence (and uniqueness) of fixed point $\mathbf{s}_\Gamma^{n+1}$.

- **Contraction Property**: $\|f(\mathbf{x}_1) - f(\mathbf{x}_2)\| \leq L\|\mathbf{x}_1 - \mathbf{x}_2\|,\quad L < 1$

![](images/stefan_fixed_point_analysis_step2.png){height=700 fig-align="center"}

---


## Appendix : Front-Tracking Enhancement

- Interface represented by a set of markers with positions $\vec{X}_I$
- Interface update formulated as optimization problem: $\mathbf{X}^{n+1} = \text{argmin} \left\{ \sum_i \left| F_i \right|^2 \right\}$

Where $F_i = \rho L (V_i^{n+1} - V_i^{n}) - ⟦\nabla T \cdot\mathbf{n}⟧$ is the Stefan condition residual

::: {layout-ncol=2}
![](images/star_evolution.gif){width=80%}

- **Solution via non-linear least squares:**
- Jacobian matrix: $J_{i,J} = \rho L \frac{\partial V_i^{n+1}}{\partial X_J}$
- Levenberg-Marquardt update:
  $\mathbf{X}^{n+1} = \mathbf{X}^{n} - (J^T J + \lambda D)^{-1} J^T \mathbf{F}$
:::

--- 

## Appendix : Navier-Stokes with Energy Coupling

::: {layout-ncol=2}
::: {.column width=50%}
**Governing Equations:**
$$
\small
\begin{aligned}
\rho_i\left(\frac{\partial \mathbf{u}_i}{\partial t} + \mathbf{u}_i \cdot \nabla \mathbf{u}_i\right) &= -\nabla p_i + \nabla \cdot (2\mu_i\mathbf{D}_i) \\
\nabla \cdot \mathbf{u}_i &= 0 \\
\frac{\partial T_i}{\partial t} + \mathbf{u}_i \cdot \nabla T_i &= \nabla \cdot (k_i \nabla T_i)
\end{aligned}
$$
:::

::: {.column width=50%}
**Interface Conditions:**
$$
\begin{aligned}
\small
⟦\mathbf{u}⟧ &= \mathbf{0} \\
⟦p - 2\mu\mathbf{D} \cdot \mathbf{n}⟧ &= \sigma \kappa \mathbf{n} \\
⟦T⟧ &= 0 \\
⟦k \nabla T \cdot \mathbf{n}⟧ &= \rho L \mathbf{v} \cdot \mathbf{n}
\end{aligned}
$$
:::
:::

**Discretized System Structure:**
$$
\tiny
\begin{bmatrix}
\mathbf{A}_{u1} & \mathbf{0} & \mathbf{B}_{u1} & \mathbf{0} & \mathbf{G}_1 & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{0} & \mathbf{A}_{u2} & \mathbf{0} & \mathbf{B}_{u2} & \mathbf{0} & \mathbf{G}_2 & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{M}_{u1} & \mathbf{0} & \mathbf{M}_{\Gamma1} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{0} & \mathbf{M}_{u2} & \mathbf{0} & \mathbf{M}_{\Gamma2} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{0} & \mathbf{0} & \mathbf{I} & -\mathbf{I} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{D}_1 & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{0} & \mathbf{D}_2 & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0}\\
\mathbf{C}_{u1T} & \mathbf{0} & \mathbf{C}_{v1T} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{A}_{T1} & \mathbf{B}_{T1} & \mathbf{0}\\
\mathbf{0} & \mathbf{C}_{u2T} & \mathbf{0} & \mathbf{C}_{v2T} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{A}_{T2}\\
\mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{0} & \mathbf{I} & \mathbf{0} & -\mathbf{I}
\end{bmatrix}
\begin{bmatrix}
\mathbf{u}_1^{n+1} \\
\mathbf{u}_2^{n+1} \\
\mathbf{u}_1^{\Gamma,n+1} \\
\mathbf{u}_2^{\Gamma,n+1} \\
p_1^{n+1} \\
p_2^{n+1} \\
T_1^{n+1} \\
T_1^{\Gamma,n+1} \\
T_2^{n+1}
\end{bmatrix}
=
\begin{bmatrix}
\mathbf{f}_{u1} \\
\mathbf{f}_{u2} \\
\mathbf{0} \\
\mathbf{0} \\
\mathbf{0} \\
0 \\
0 \\
f_{T1} \\
f_{T2} \\
0
\end{bmatrix}
$$


--- 

## Appendix : Gradient Calculation at the interface

::: {layout-ncol=2}
![Johansen and Colella method](images/colella_grad.svg){width=85%}

![Our cut cell method](images/interface_grad.svg){width=100%}
:::

::: {layout-ncol=2}
2nd order gradient calculation at the interface using Johansen and Colella method

Gradient calculation at the interface using our cut-cell method (1st order)
:::

## Appendix: Flux Computation Using Stokes' Theorem

::: {layout-ncol=2}
::: {.column}
**Stokes' Theorem Application:**

$$\int_{\Omega_{f}} \nabla T \, dV = \int_{\partial\Omega_{f}} T \mathbf{n} \, dS$$

- Create staggered control volume around each face
- Compute gradient as surface integral:

$$\nabla_f T \approx \frac{1}{V_f} \int_{\partial\Omega_{f}} T \mathbf{n} \, dS$$

- Preserves conservation
- Handles irregular geometries naturally
:::

::: {.column}
![](images/staggered_cell_visualization.svg){width=100%}

**Practical Implementation:**

$$\int_{\partial\Omega_{f}} T \mathbf{n} \, dS \approx \sum_{e \in \partial\Omega_f} T_e A_e \mathbf{n}_e$$

- Second-order for regular cells
- First-order for cut cells
:::
:::

## Appendix : Prescribed Interface Motion

- No parasitic oscillations
- Minimium cell number to resolve the interface : $6 \times 6$ cells

![](images/shrinking.gif){width=100% fig-align="center"}

---

## Appendix : Fresh/Dead Cells

- **Handling**: 
  - Still solve for temperature in those cells to maintain conservation
  - Linear constraint to ensure right fluxes across faces

![](images/deadcell.svg){width=100% fig-align="center"}


$$
\begin{aligned}
(V^{n+1} T^{n+1} - V^n T^n) &- (V^{n+1} - V^{n}) T^{\Gamma} \\
& = \underbrace{\sum_{f \in \text{reg}} k \mathcal{A_f} \mathcal{\nabla_f(\tilde{T})}}_{\substack{\text{space-time flux}\\\text{through regular faces}}} + \underbrace{\mathcal{F_{\Gamma}}}_{\substack{\text{space-time flux across}\\\text{moving interface}}} 
+ \underbrace{S_i \mathcal{V_i}}_{\text{source term}} 
\end{aligned} 
$$
---

## Appendix : Local Conservation via Newton Iteration

- **Local Conservation**: Enforce conservation at each iteration
- **Energy Error**: Measure of conservation error

![](images/energy_error.png){width=100% fig-align="center"}

---

## References

::: {#refs}
:::

## References {visibility="hidden"}

@2025TwoPhase
@Chen1997
@Mullins1964
@Polyanin2016
@Popinet2009
@Remmerswaal2022
@Stefan1891
@Weymouth2010
@Quirós2024